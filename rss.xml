<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Nate Amack]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://nateamack.com</link><generator>RSS for Node</generator><lastBuildDate>Wed, 20 Feb 2019 04:25:31 GMT</lastBuildDate><item><title><![CDATA[Importing React]]></title><description><![CDATA[When I first started writing React, I noticed the requirement of importing React in my JSX files: This wasn‚Äôt too much of a leap for me‚Ä¶]]></description><link>https://nateamack.com/importing-react/</link><guid isPermaLink="false">https://nateamack.com/importing-react/</guid><pubDate>Tue, 19 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When I first started writing React, I noticed the requirement of importing React in my JSX files:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; ‚Äòreact‚Äô&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This wasn‚Äôt too much of a leap for me, since I had already been importing Ember for years before:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Ember &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; ‚Äòember‚Äô&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But then, I noticed that people were importing all of React‚Äôs exports as a namespace:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; ‚Äòreact‚Äô&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I initially thought this was a fancy new way of importing React that would allow Webpack to perform advanced operations like tree shaking. Unfortunately, this is not the case. The reality is that these are just two different ways to import &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; into your file.&lt;/p&gt;
&lt;h2&gt;Why do we need to import React anyway?&lt;/h2&gt;
&lt;p&gt;You may have noticed that even though you need to import &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt;, you don‚Äôt actually use it anywhere in your file. Usually, it is bad practice to leave unused variables sitting around in a file and your linter should complain. This is not the case for &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt;, however, since JSX requires it to be in scope. Eventually though, you won‚Äôt have to import &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; at all for your JSX to know what is going on. You‚Äôll only have to import the parts of React that you actually need, like hooks, context, and types (üòè). In fact, Ember has already dropped the requirement for importing &lt;code class=&quot;language-text&quot;&gt;Ember&lt;/code&gt; as of &lt;a href=&quot;https://www.emberjs.com/blog/2017/10/11/ember-2-16-released.html&quot;&gt;Ember 2.16&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Which one should you use?&lt;/h2&gt;
&lt;p&gt;At this point in time, it doesn‚Äôt matter. &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; just needs to be in scope for JSX to render correctly. How you get it there is up to you: it is a stylistic choice. That being said, consistency is more important than style, so just be consistent throughout a project.&lt;/p&gt;
&lt;p&gt;If you do end up importing all of React‚Äôs exports into the &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; namespace using &lt;code class=&quot;language-text&quot;&gt;import * as React from ‚Äòreact‚Äô&lt;/code&gt;, you won‚Äôt be able to use any more named imports in the file. This is because everything has already been exported - just into the &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; namespace. This is also technically the case when you import &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; as the default import using &lt;code class=&quot;language-text&quot;&gt;import React from ‚Äòreact‚Äô&lt;/code&gt;. You are able to use anything in the namespace, like &lt;code class=&quot;language-text&quot;&gt;React.useState&lt;/code&gt;. Personally, I prefer to use named imports to reduce the need for prepending everything with &lt;code class=&quot;language-text&quot;&gt;React.&lt;/code&gt;. Then, when we don‚Äôt need to import &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; at all, it will be easy to update using a simple find and replace.&lt;/p&gt;
&lt;p&gt;The ability to import &lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; as the default export is really just an illusion by Babel to make things look nice. Without it, we would &lt;strong&gt;have&lt;/strong&gt; to write &lt;code class=&quot;language-text&quot;&gt;import * as React from ‚Äòreact‚Äô&lt;/code&gt; everywhere and we wouldn‚Äôt have a choice. So make a choice and stick with it - at least on a per project basis.&lt;/p&gt;</content:encoded></item></channel></rss>